#ifndef INC_XmlPLLexerTokenTypes_hpp_
#define INC_XmlPLLexerTokenTypes_hpp_

/* $ANTLR 2.7.3 (20050127-10): "XmlPL.g" -> "XmlPLLexerTokenTypes.hpp"$ */

#ifndef CUSTOM_API
# define CUSTOM_API
#endif

#ifdef __cplusplus
struct CUSTOM_API XmlPLLexerTokenTypes {
#endif
	enum {
		EOF_ = 1,
		PROGRAM = 4,
		PACKAGE_DECL = 5,
		VERSION_RANGE = 6,
		VERSION_OR = 7,
		TYPE = 8,
		ARGUMENT = 9,
		VAR_DECL = 10,
		FUNC_DECL = 11,
		IMPORT_DECL = 12,
		EXPR_STMT = 13,
		BREAK = 14,
		CONTINUE = 15,
		RETURN = 16,
		IF = 17,
		FOREACH = 18,
		FOR = 19,
		EMPTY = 20,
		WHILE = 21,
		SWITCH = 22,
		CASE = 23,
		DEFAULT = 24,
		TRY = 25,
		THROW = 26,
		REDIRECT = 27,
		NATIVE = 28,
		BLOCK = 29,
		ASSIGN = 30,
		ADD_ASSIGN = 31,
		SUB_ASSIGN = 32,
		MUL_ASSIGN = 33,
		DIV_ASSIGN = 34,
		MOD_ASSIGN = 35,
		COMMA_ASSIGN = 36,
		SEQUENCE_EXPR = 37,
		BIN_EXPR = 38,
		OR = 39,
		AND = 40,
		BOR = 41,
		BXOR = 42,
		BAND = 43,
		NE = 44,
		EQ = 45,
		GT = 46,
		LTE = 47,
		GTE = 48,
		BSL = 49,
		BSR = 50,
		MOD = 51,
		UNARY_EXPR = 52,
		NOT = 53,
		INC = 54,
		DEC = 55,
		BCOMP = 56,
		ISA_EXPR = 57,
		PATH = 58,
		PREDICATES = 59,
		INT_PREDICATE = 60,
		STEP = 61,
		NAME_TEST = 62,
		TYPE_TEST = 63,
		FILTER_EXPR = 64,
		ARRAY_EXPR = 65,
		FCALL = 66,
		VAR_REF = 67,
		CONSTANT = 68,
		INTEGER = 69,
		REAL = 70,
		VERSION = 71,
		STRING = 72,
		REGEX = 73,
		XML_QNAME = 74,
		XML_ELEM = 75,
		XML_ATTR = 76,
		XML_COM = 77,
		XML_PI = 78,
		XML_COMMENT_CHARS = 79,
		XML_PI_CHARS = 80,
		CAST = 81,
		NATIVE_DATA = 82,
		LETTER = 83,
		DIGIT = 84,
		HEX = 85,
		STR_ESC = 86,
		REG_ESC = 87,
		UNICODE = 88,
		HEX_WORD = 89,
		HEX_BYTE = 90,
		HEX_CODE = 91,
		OCT_CODE = 92,
		S = 93,
		COMMENT = 94,
		SINGLE_COMMENT = 95,
		END_ELEM_SHORT = 96,
		END_ELEM = 97,
		START_XML_COMM = 98,
		END_XML_COMM = 99,
		START_PI = 100,
		END_PI = 101,
		SEMI = 102,
		OCB = 103,
		CCB = 104,
		DOT = 105,
		DOTDOT = 106,
		COMMA = 107,
		PLUS = 108,
		MINUS = 109,
		STAR = 110,
		FS = 111,
		FSFS = 112,
		LESS = 113,
		COLON = 114,
		OPAREN = 115,
		CPAREN = 116,
		OSB = 117,
		CSB = 118,
		AT = 119,
		QUESTION = 120,
		DOLLAR = 121,
		NAME = 122,
		LITERAL___native__ = 123,
		LITERAL_as = 124,
		LITERAL_attribute = 125,
		LITERAL_boolean = 126,
		LITERAL_break = 127,
		LITERAL_byte = 128,
		LITERAL_case = 129,
		LITERAL_catch = 130,
		LITERAL_comment = 131,
		LITERAL_constant = 132,
		LITERAL_continue = 133,
		LITERAL_default = 134,
		LITERAL_document = 135,
		LITERAL_element = 136,
		LITERAL_else = 137,
		LITERAL_exception = 138,
		LITERAL_false = 139,
		LITERAL_for = 140,
		LITERAL_foreach = 141,
		LITERAL_if = 142,
		LITERAL_import = 143,
		LITERAL_integer = 144,
		LITERAL_node = 145,
		LITERAL_null = 146,
		LITERAL_package = 147,
		LITERAL_pi = 148,
		LITERAL_prefix = 149,
		LITERAL_qname = 150,
		LITERAL_real = 151,
		LITERAL_redirect = 152,
		LITERAL_return = 153,
		LITERAL_string = 154,
		LITERAL_switch = 155,
		LITERAL_text = 156,
		LITERAL_throw = 157,
		LITERAL_true = 158,
		LITERAL_try = 159,
		LITERAL_void = 160,
		LITERAL_while = 161,
		NULL_TREE_LOOKAHEAD = 3
	};
#ifdef __cplusplus
};
#endif
#endif /*INC_XmlPLLexerTokenTypes_hpp_*/
